import streamlit as st
import openai

# Set OpenAI API key
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Streamlit app config
st.set_page_config(page_title="рж░рж┐ржпрж╝рж╛рж▓рж┐рж╕рзНржЯрж┐ржХ ржкрзНрж░ржорзНржкржЯ ржЬрзЗржирж╛рж░рзЗржЯрж░", page_icon="ЁЯОи")
st.title("ЁЯза ржмрж╛рж╕рзНрждржмржзрж░рзНржорзА ржкрзНрж░ржорзНржкржЯ ржЬрзЗржирж╛рж░рзЗржЯрж░")

st.markdown("AI ржЪрж┐рждрзНрж░ рждрзИрж░рж┐рж░ ржЬржирзНржп ржЪрж┐рждрзНрж░ржирж╛ржЯрзНржп рж╕рзНржЯрж╛ржЗрж▓рзЗрж░ ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐ ржХрж░рзБржиред ржЗржВрж░рзЗржЬрж┐, ржмрж╛ржВрж▓рж╛ ржмрж╛ ржмрж╛ржВрж▓рж┐рж╢рзЗ ржЗржиржкрзБржЯ ржжрж┐ржиред")

# Dropdown options in Bangla
style_options = {
    "ржлржЯрзЛрж░рж┐ржпрж╝рж╛рж▓рж┐ржЬржо": "Photorealism",
    "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ": "Cyberpunk",
    "рж░рзЗржирзЗрж╕рж╛ржБ": "Renaissance",
    "ржмрж╛рж░рзЛржХ": "Baroque",
    "ржЧрзНрж▓рж┐ржЪ ржЖрж░рзНржЯ": "Glitch Art",
    "рж╕рж╛рж░рж░рж┐ржпрж╝рж╛рж▓рж┐ржЬржо": "Surrealism",
    "ржлрзНржпрж╛ржирзНржЯрж╛рж╕рж┐ ржЗрж▓рж╛рж╕рзНржЯрзНрж░рзЗрж╢ржи": "Fantasy Illustration",
    "ржирж┐ржУ-ржирзЛржпрж╝рж╛рж░": "Neo-noir"
}

fusion_options = {
    "ржирж╛": "None",
    "ржнрж┐ржирзНржЯрзЗржЬ рж╕рж╛ржЗ-ржлрж╛ржЗ ржУ ржмрж╛рж░рзЛржХ": "Vintage sci-fi with Baroque influences",
    "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ ржУ ржУржпрж╝рж╛ржЯрж╛рж░ржХрж╛рж▓рж╛рж░": "Cyberpunk with watercolor textures",
    "ржорж┐ржирж┐ржорж╛рж▓ рж░рж┐ржпрж╝рж╛рж▓рж┐ржЬржо ржУ ржЧрзНрж▓рж┐ржЪ": "Minimalist realism with glitch effects",
    "ржлрж┐рж▓рзНржо ржирзЛржпрж╝рж╛рж░ ржУ рж╕рзНржмржкрзНржиржжрзГрж╢рзНржп": "Film noir meets surrealist dreamscape"
}

mood_options = {
    "рж╢рж╛ржирзНржд ржУ ржЕрждрзАржирзНржжрзНрж░рж┐ржпрж╝": "Serene and ethereal",
    "ржЕржирзНржзржХрж╛рж░ ржУ ржзрзНржмржВрж╕рж╛рждрзНржоржХ": "Dark and dystopian",
    "ржмрж┐рж╖ржгрзНржг ржУ ржЖржмрзЗржЧржкрзНрж░ржмржг": "Melancholic and moody",
    "ржмрж┐рж╢рзГржЩрзНржЦрж▓ ржУ ржЧрждрж┐рж╢рзАрж▓": "Chaotic and energetic",
    "рж╢рж╛ржирзНрждрж┐ржкрзВрж░рзНржг ржУ ржзрзНржпрж╛ржиржоржЧрзНржи": "Peaceful and meditative"
}

lighting_options = {
    "рж╕рзЛржирж╛рж▓рж┐ рж░рзЛржж": "Golden hour sunlight",
    "ржирж┐ржУржи ржЖрж▓рзЛ": "High contrast neon glow",
    "ржирж░ржо ржЖрж▓рзЛ": "Soft diffused light",
    "ржмрзНржпрж╛ржХрж▓рж╛ржЗржЯ рж╕рж┐рж▓рзБржпрж╝рзЗржЯ": "Backlit silhouette",
    "рж╣рж╛рж░рзНрж╢ рж╕рзНржЯрзБржбрж┐ржУ рж▓рж╛ржЗржЯ": "Harsh studio lighting"
}

camera_options = {
    "рзйрзлржорж┐ржорж┐ рж▓рзЗржирзНрж╕": "Captured with a 35mm lens",
    "рзлрзжржорж┐ржорж┐ рж▓рзЗржирзНрж╕": "Captured with a 50mm lens",
    "ржбрзНрж░рзЛржи ржнрж┐ржЙ": "Aerial drone view",
    "ржорзНржпрж╛ржХрзНрж░рзЛ ржХрзНрж▓рзЛржЬ-ржЖржк": "Macro close-up",
    "ржлрж┐рж╢-ржЖржЗ ржнрж┐ржЙ": "Fisheye lens view"
}

# Inputs (can be Bangla, English or Banglish)
subject = st.text_input("ЁЯзН ржЪрж░рж┐рждрзНрж░ / ржмрж┐рж╖рзЯ", "ржПржХржЬржи рж░рж╣рж╕рзНржпржоржпрж╝ ржнрзНрж░ржоржгржХрж╛рж░рзА")
character_attributes = st.text_input("ЁЯФН ржЪрж░рж┐рждрзНрж░рзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп", "рзйрзж ржмржЫрж░ ржмрзЯрж╕рзА, рж▓ржорзНржмрж╛ ржХрзЛржЯ, ржирзАрж▓ ржЪрзЛржЦ, рж╕рж╛ржЗржмрж╛рж░ рж╣рж╛ржд")
environment = st.text_input("ЁЯМЖ ржкрж░рж┐ржмрзЗрж╢ / ржжрзГрж╢рзНржпржкржЯ", "ржнржмржирзЗрж░ ржЫрж╛ржжрзЗ ржкрж░рж┐рждрзНржпржХрзНржд ржмрж╛ржЧрж╛ржи, ржнржмрж┐рж╖рзНржпрждрзЗрж░ рж╢рж╣рж░")
objects = st.text_input("ЁЯУж ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж╕рзНрждрзБ", "ржбрзНрж░рзЛржи, ржЕрзНржпрж╛ржирзНржЯрзЗржирж╛ржпрж╝ рж▓рждрж╛, ржЭрж▓ржХрж╛ржирж┐ ржмрж┐рж▓ржмрзЛрж░рзНржб")
weather = st.selectbox("ЁЯМж ржЖржмрж╣рж╛ржУржпрж╝рж╛", ["ржкрж░рж┐рж╖рзНржХрж╛рж░", "ржмрзГрж╖рзНржЯрж┐", "ржХрзБржпрж╝рж╛рж╢рж╛", "ржЭржбрж╝", "рждрзБрж╖рж╛рж░", "ржорзЗржШрж▓рж╛", "ржЕржЬрж╛ржирж╛"])
time_of_day = st.selectbox("ЁЯХР рж╕ржоржпрж╝", ["ржнрзЛрж░", "рж╕ржХрж╛рж▓", "ржжрзБржкрзБрж░", "ржЧрзЛрж▓рзНржбрзЗржи ржЖржУрзЯрж╛рж░", "рж╕ржирзНржзрзНржпрж╛", "рж░рж╛ржд", "ржоржзрзНржпрж░рж╛ржд"])
lighting = st.selectbox("ЁЯТб ржЖрж▓рзЛ", list(lighting_options.keys()))
mood = st.selectbox("ЁЯОн ржорзБржб / ржЖржмрзЗржЧ", list(mood_options.keys()))
style = st.selectbox("ЁЯОи ржЖрж░рзНржЯ рж╕рзНржЯрж╛ржЗрж▓", list(style_options.keys()))
artistic_fusion = st.selectbox("ЁЯФА рж╕рзНржЯрж╛ржЗрж▓ ржлрж┐ржЙрж╢ржи", list(fusion_options.keys()))
camera = st.selectbox("ЁЯУ╖ ржХрзНржпрж╛ржорзЗрж░рж╛ / рж▓рзЗржирзНрж╕", list(camera_options.keys()))
action = st.text_input("ЁЯОм ржХрж░рзНржо / ржЕржирзБржнрзБрждрж┐", "рж╕рзЗ рж╢рж╣рж░ржЬрзБржбрж╝рзЗ рждрж╛ржХрж┐ржпрж╝рзЗ ржерж╛ржХрзЗ, ржзрзЛржБржпрж╝рж╛ рждрж╛рж░ ржХрзЛржЯ ржерзЗржХрзЗ ржЙржарзЗ ржпрж╛ржЪрзНржЫрзЗ")
colors = st.text_input("ЁЯМИ рж░ржВ / ржЯрзЗржХрзНрж╕ржЪрж╛рж░", "ржирзАрж▓, ржмрзЗржЧрзБржирж┐ ржЫрж╛ржпрж╝рж╛, ржЧрзЛрж▓рж╛ржкрж┐ ржирж┐ржУржи")
abstract = st.text_input("ЁЯТн ржмрж┐ржорзВрж░рзНржд ржнрж╛ржмржирж╛", "ржПржХрж╛ржХрзАрждрзНржмрзЗрж░ ржкрзНрж░рждрзАржХ ржПржХржЯрж┐ рж╕ржВржпрзБржХрзНржд ржжрзБржирж┐ржпрж╝рж╛ржпрж╝")
notes = st.text_area("ЁЯУЭ ржЕрждрж┐рж░рж┐ржХрзНржд ржирж┐рж░рзНржжрзЗрж╢ржирж╛", "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ ржирж┐ржУржи ржУ ржирзЛржпрж╝рж╛рж░ рж╢рзИрж▓рзА ржорж┐рж╢рзНрж░ржг ржХрж░рзБржи")

system_prompt = """You are a professional prompt engineer specializing in generating highly detailed, vivid, and imaginative prompts for AI image generation.

Your format must always follow this structure:
[Style] | [Subject/Character] | [Environment] | [Details about action/emotion] | [Color Scheme/Lighting/Texture]

Use elevated, visual language and cinematic descriptions.
Follow these rules:
- Focus on character traits, mood, emotion, atmosphere, materials, and depth
- Include abstract or conceptual ideas when given
- Blend artistic styles when requested
- No bullet points. Only output the final prompt in one block.

The goal: craft something a visual artist could bring to life immediately.
"""

user_combined = f"""Style: {style_options[style]}
Artistic Fusion: {fusion_options[artistic_fusion]}
Subject: {subject}
Character Details: {character_attributes}
Environment: {environment}
Objects/Scene Elements: {objects}
Time of day: {time_of_day}
Weather: {weather}
Lighting: {lighting_options[lighting]}
Mood: {mood_options[mood]}
Camera Details: {camera_options[camera]}
Action/Emotion: {action}
Color Palette & Texture: {colors}
Abstract/Conceptual Notes: {abstract}
Extra Notes: {notes}"""

if st.button("ЁЯОп ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐ ржХрж░рзБржи"):
    with st.spinner("ржкрзНрж░ржорзНржкржЯ ржкрзНрж░рж╕рзНрждрзБржд рж╣ржЪрзНржЫрзЗ..."):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # You can change to "gpt-4" if you want
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_combined}
                ],
                temperature=0.8,
                max_tokens=400
            )

            result = response['choices'][0]['message']['content'].strip()
            total_tokens = response['usage']['total_tokens']

            st.markdown("### ЁЯЦ╝я╕П рждрзИрж░рж┐ ржкрзНрж░ржорзНржкржЯ")
            st.code(result, language="text")
            st.success(f"ЁЯФв ржорзЛржЯ ржЯрзЛржХрзЗржи ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝рзЗржЫрзЗ: {total_tokens}")

        except Exception as e:
            st.error(f"тЭМ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: {e}")
