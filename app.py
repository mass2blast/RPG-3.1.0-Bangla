import streamlit as st
import openai
from googletrans import Translator

# Initialize OpenAI API key from Streamlit secrets
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Translator setup for Bangla to English
translator = Translator()

# Streamlit page setup
st.set_page_config(page_title="Realistic Prompt Generator", page_icon="üé®")
st.title("üß† Ultra-Realistic Prompt Generator")
st.markdown("Craft vivid, cinematic prompts for AI-generated images with highly detailed control.")

# ---- Presets and Dropdowns ---- (Bangla and English Text)
style_options = [
    ("‡¶´‡¶ü‡ßã‡¶∞‡¶ø‡ßü‡¶æ‡¶≤‡¶ø‡¶ú‡¶Æ (Photorealism)", "Photorealism"),
    ("‡¶∏‡¶æ‡¶á‡¶¨‡¶æ‡¶∞‡¶™‡¶ô‡ßç‡¶ï (Cyberpunk)", "Cyberpunk"),
    ("‡¶∞‡ßá‡¶®‡ßá‡¶∏‡¶æ‡¶Å (Renaissance)", "Renaissance"),
    ("‡¶¨‡¶æ‡¶∞‡ßã‡¶ï (Baroque)", "Baroque"),
    ("‡¶ó‡ßç‡¶≤‡¶ø‡¶ö ‡¶Ü‡¶∞‡ßç‡¶ü (Glitch Art)", "Glitch Art"),
    ("‡¶∏‡ßÅ‡¶∞‡¶∞‡¶ø‡ßü‡¶æ‡¶≤‡¶ø‡¶ú‡¶Æ (Surrealism)", "Surrealism"),
    ("‡¶´‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶∏‡¶ø ‡¶á‡¶≤‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® (Fantasy Illustration)", "Fantasy Illustration"),
    ("‡¶®‡¶ø‡¶ì-‡¶®‡ßã‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ (Neo-noir)", "Neo-noir")
]

fusion_options = [
    ("‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶®‡¶æ (None)", "None"),
    ("‡¶≠‡¶ø‡¶®‡¶ü‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶´‡¶æ‡¶á ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶∞‡ßã‡¶ï ‡¶™‡ßç‡¶∞‡¶≠‡¶æ‡¶¨ (Vintage sci-fi with Baroque influences)", "Vintage sci-fi with Baroque influences"),
    ("‡¶∏‡¶æ‡¶á‡¶¨‡¶æ‡¶∞‡¶™‡¶ô‡ßç‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡¶æ‡¶ü‡¶æ‡¶∞‡¶ï‡¶≤‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞ (Cyberpunk with watercolor textures)", "Cyberpunk with watercolor textures"),
    ("‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶∞‡¶ø‡ßü‡ßá‡¶≤‡¶ø‡¶ú‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶≤‡¶ø‡¶ö ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü‡¶∏ (Minimalist realism with glitch effects)", "Minimalist realism with glitch effects"),
    ("‡¶´‡¶ø‡¶≤‡ßç‡¶Æ ‡¶®‡ßã‡ßü‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶∞‡¶∞‡¶ø‡ßü‡¶æ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶°‡ßç‡¶∞‡¶ø‡¶Æ‡¶∏‡ßç‡¶ï‡ßá‡¶™ (Film noir meets surrealist dreamscape)", "Film noir meets surrealist dreamscape")
]

mood_options = [
    ("‡¶∏‡ßÅ‡¶ñ‡ßÄ ‡¶ì ‡¶∞‡¶π‡¶∏‡ßç‡¶Ø‡¶Æ‡ßü (Serene and ethereal)", "Serene and ethereal"),
    ("‡¶Ö‡¶®‡ßç‡¶ß‡¶ï‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßÅ‡¶É‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶® (Dark and dystopian)", "Dark and dystopian"),
    ("‡¶Æ‡¶®‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶∑‡¶£‡ßç‡¶£ (Melancholic and moody)", "Melancholic and moody"),
    ("‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ (Chaotic and energetic)", "Chaotic and energetic"),
    ("‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ì ‡¶ß‡ßç‡¶Ø‡¶æ‡¶®‡¶Æ‡¶ó‡ßç‡¶® (Peaceful and meditative)", "Peaceful and meditative")
]

lighting_options = [
    ("‡¶∏‡ßã‡¶®‡¶æ‡¶≤‡ßÄ ‡¶Ü‡¶≤‡ßã (Golden hour sunlight)", "Golden hour sunlight"),
    ("‡¶â‡¶ö‡ßç‡¶ö ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶∏‡ßç‡¶ü ‡¶®‡¶ø‡¶ì‡¶® ‡¶Ü‡¶≤‡ßã (High contrast neon glow)", "High contrast neon glow"),
    ("‡¶∏‡ßã‡¶´‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶´‡¶ø‡¶â‡¶∏‡¶° ‡¶Ü‡¶≤‡ßã (Soft diffused light)", "Soft diffused light"),
    ("‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶≤‡¶ø‡¶ü ‡¶∏‡¶ø‡¶≤‡ßÅ‡ßü‡ßá‡¶ü (Backlit silhouette)", "Backlit silhouette"),
    ("‡¶ï‡¶†‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì ‡¶Ü‡¶≤‡ßã (Harsh studio lighting)", "Harsh studio lighting")
]

camera_options = [
    ("‡ß©‡ß´ ‡¶Æ‡¶ø‡¶Æ‡¶ø ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ (Captured with a 35mm lens)", "Captured with a 35mm lens"),
    ("‡ß´‡ß¶ ‡¶Æ‡¶ø‡¶Æ‡¶ø ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ (Captured with a 50mm lens)", "Captured with a 50mm lens"),
    ("‡¶è‡ßü‡¶æ‡¶∞‡¶ø‡ßü‡¶æ‡¶≤ ‡¶°‡ßç‡¶∞‡ßã‡¶® ‡¶≠‡¶ø‡¶â (Aerial drone view)", "Aerial drone view"),
    ("‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∞‡ßã ‡¶ï‡ßç‡¶≤‡ßã‡¶ú-‡¶Ü‡¶™ (Macro close-up)", "Macro close-up"),
    ("‡¶´‡¶ø‡¶∂‡¶Ü‡¶á ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶≠‡¶ø‡¶â (Fisheye lens view)", "Fisheye lens view")
]

# ---- Inputs ---- (Initial mixed Bangla, English, and Banglish)
subject = st.text_input("üßç ‡¶¨‡¶ø‡¶∑‡ßü / ‡¶ö‡¶∞‡¶ø‡¶§‡ßç‡¶∞ (Subject / Character)", "A mysterious wanderer")
character_attributes = st.text_input("üîç ‡¶ö‡¶∞‡¶ø‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø (Character Attributes)", "mid-30s, male, long dark coat, glowing blue eyes, cybernetic hand")
environment = st.text_input("üåÜ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ / ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç (Environment / Setting)", "Abandoned rooftop garden in a futuristic city")
objects = st.text_input("üì¶ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶∏ ‡¶¨‡¶æ ‡¶Æ‡ßÇ‡¶≤ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® (Objects or Key Elements)", "Hovering drones, vines crawling up antennas, digital billboard flickering")
weather = st.selectbox("üå¶ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ (Weather)", [x[0] for x in weather_options], index=2)
time_of_day = st.selectbox("üïê ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø (Time of Day)", ["Dawn", "Morning", "Noon", "Golden Hour", "Dusk", "Night", "Midnight"], index=0)
lighting = st.selectbox("üí° ‡¶Ü‡¶≤‡ßã‡¶∞ ‡¶ß‡¶∞‡¶® (Lighting Style)", [x[0] for x in lighting_options])
mood = st.selectbox("üé≠ ‡¶Æ‡ßÅ‡¶° / ‡¶Ü‡¶¨‡ßá‡¶ó (Mood / Emotional Tone)", [x[0] for x in mood_options])
style = st.selectbox("üé® ‡¶∂‡ßà‡¶≤‡ßÄ (Artistic Style)", [x[0] for x in style_options])
artistic_fusion = st.selectbox("üîÄ ‡¶∂‡ßà‡¶≤‡ßÄ ‡¶∏‡¶Ç‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞‡¶£ (Style Fusion)", [x[0] for x in fusion_options])
camera = st.selectbox("üì∑ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ / ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡¶ø‡¶∂‡¶¶ (Camera / Lens Details)", [x[0] for x in camera_options])
action = st.text_input("üé¨ ‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ / ‡¶Ü‡¶¨‡ßá‡¶ó (Action / Emotion)", "The man gazes across the city, smoke trailing from his coat, lost in memory")
colors = st.text_input("üåà ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶ü / ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞ (Color Palette / Textures)", "Moody blues, purple shadows, flickering pink neon, wet surfaces with reflections")
abstract = st.text_input("üí≠ ‡¶¨‡¶ø‡¶Æ‡ßÇ‡¶∞‡ßç‡¶§ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ (Abstract Concept)", "A metaphor for isolation in a hyper-connected world")
notes = st.text_area("üìù ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡ßã‡¶ü (Extra Notes)", "Blend cyberpunk neon with noir grain and dramatic backlighting")

# Combine the user inputs into a single string
user_combined = f"""Style: {style}
Artistic Fusion: {artistic_fusion}
Subject: {subject}
Character Details: {character_attributes}
Environment: {environment}
Objects/Scene Elements: {objects}
Time of day: {time_of_day}
Weather: {weather}
Lighting: {lighting}
Mood: {mood}
Camera Details: {camera}
Action/Emotion: {action}
Color Palette & Texture: {colors}
Abstract/Conceptual Notes: {abstract}
Extra Notes: {notes}"""

# ---- Translate the Bangla Inputs to English (for output) ----
# Here we're translating inputs that might be in Bangla or Banglish to English
translated_combined = translator.translate(user_combined, src='bn', dest='en').text

# Define system_prompt here
system_prompt = """You are a professional prompt engineer specializing in generating highly detailed, vivid, and imaginative prompts for AI image generation.

Your format must always follow this structure:
[Style] | [Subject/Character] | [Environment] | [Details about action/emotion] | [Color Scheme/Lighting/Texture]

Use elevated, visual language and cinematic descriptions.
Follow these rules:
- Focus on character traits, mood, emotion, atmosphere, materials, and depth
- Include abstract or conceptual ideas when given
- Blend artistic styles when requested
- No bullet points. Only output the final prompt in one block.

The goal: craft something a visual artist could bring to life immediately.
"""

# Button to trigger prompt generation
if st.button("üéØ Generate Prompt"):
    with st.spinner("Crafting a cinematic prompt..."):
        try:
            # OpenAI API call using the updated method for completions
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # Use "gpt-4" if you want the latest model (paid version)
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": translated_combined}
                ],
                temperature=0.8,
                max_tokens=400
            )

            # Extract the result correctly from the response
            result = response['choices'][0]['message']['content'].strip()

            # Display the result in the app
            st.markdown("### üñºÔ∏è Final Prompt")
            st.code(result, language="text")

        except Exception as e:
            st.error(f"Error: {e}")
