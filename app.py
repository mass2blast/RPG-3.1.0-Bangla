import streamlit as st
import openai
from googletrans import Translator

# Initialize translator
translator = Translator()

# Set OpenAI API key
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Streamlit config
st.set_page_config(page_title="Bangla Realistic Prompt Generator", page_icon="ЁЯОи")
st.title("ЁЯза ржмрж╛рж╕рзНрждржмржзрж░рзНржорзА ржкрзНрж░ржорзНржкржЯ ржЬрзЗржирж╛рж░рзЗржЯрж░ (Realistic Prompt Generator)")

st.markdown("AI ржЗржорзЗржЬ рждрзИрж░рж┐рж░ ржЬржирзНржп ржмрж┐рж╕рзНрждрзГржд ржУ рж╕рж┐ржирзЗржорж╛ржЯрж┐ржХ ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐ ржХрж░рзБржиред")

# ---- Dropdown Options in Bangla ----
style_options = {
    "ржлржЯрзЛрж░рж┐ржпрж╝рж╛рж▓рж┐ржЬржо": "Photorealism",
    "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ": "Cyberpunk",
    "рж░рзЗржирзЗрж╕рж╛ржБ": "Renaissance",
    "ржмрж╛рж░рзЛржХ": "Baroque",
    "ржЧрзНрж▓рж┐ржЪ ржЖрж░рзНржЯ": "Glitch Art",
    "рж╕рж╛рж░рж░рж┐ржпрж╝рж╛рж▓рж┐ржЬржо": "Surrealism",
    "ржлрзНржпрж╛ржирзНржЯрж╛рж╕рж┐ ржЗрж▓рж╛рж╕рзНржЯрзНрж░рзЗрж╢ржи": "Fantasy Illustration",
    "ржирж┐ржУ-ржирзЛржпрж╝рж╛рж░": "Neo-noir"
}

fusion_options = {
    "ржХрзЛржиржЯрж┐ ржирж╛": "None",
    "ржнрж┐ржиржЯрзЗржЬ рж╕рж╛ржЗ-ржлрж╛ржЗ ржПржмржВ ржмрж╛рж░рзЛржХ": "Vintage sci-fi with Baroque influences",
    "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ ржПржмржВ ржУржпрж╝рж╛ржЯрж╛рж░ржХрж╛рж▓рж╛рж░": "Cyberpunk with watercolor textures",
    "ржорж┐ржирж┐ржорж╛рж▓рж┐рж╕рзНржЯ ржПржмржВ ржЧрзНрж▓рж┐ржЪ": "Minimalist realism with glitch effects",
    "ржирзЛржпрж╝рж╛рж░ ржПржмржВ рж╕рзНржмржкрзНржиржжрзГрж╢рзНржп": "Film noir meets surrealist dreamscape"
}

mood_options = {
    "рж╢рж╛ржирзНржд ржПржмржВ ржРрж╢рзНржмрж░рж┐ржХ": "Serene and ethereal",
    "ржЕржирзНржзржХрж╛рж░ ржПржмржВ ржзрзНржмржВрж╕рж╛рждрзНржоржХ": "Dark and dystopian",
    "ржмрж┐рж╖ржгрзНржи ржПржмржВ ржЖржмрзЗржЧржкрзНрж░ржмржг": "Melancholic and moody",
    "ржЕржЧрзЛржЫрж╛рж▓рзЛ ржПржмржВ ржЙржжрзНржжрзАржкржирж╛ржоржпрж╝": "Chaotic and energetic",
    "ржирж┐рж░ржм ржПржмржВ ржзрзНржпрж╛ржиржоржЧрзНржи": "Peaceful and meditative"
}

lighting_options = {
    "ржЧрзЛрж▓рзНржбрзЗржи ржЖржУрзЯрж╛рж░ ржЖрж▓рзЛ": "Golden hour sunlight",
    "ржирж┐ржпрж╝ржи ржЖрж▓рзЛ": "High contrast neon glow",
    "ржирж░ржо ржЖрж▓рзЛ": "Soft diffused light",
    "ржмрзНржпрж╛ржХрж▓рж┐ржЯ рж╕рж┐рж▓рзБржпрж╝рзЗржЯ": "Backlit silhouette",
    "рж╣рж╛рж░рзНрж╢ рж╕рзНржЯрзБржбрж┐ржУ ржЖрж▓рзЛ": "Harsh studio lighting"
}

camera_options = {
    "рзйрзлржорж┐ржорж┐ рж▓рзЗржирзНрж╕": "Captured with a 35mm lens",
    "рзлрзжржорж┐ржорж┐ рж▓рзЗржирзНрж╕": "Captured with a 50mm lens",
    "ржбрзНрж░рзЛржи ржнрж┐ржЙ": "Aerial drone view",
    "ржорзНржпрж╛ржХрзНрж░рзЛ ржХрзНрж▓рзЛржЬ-ржЖржк": "Macro close-up",
    "ржлрж┐рж╢ржЖржЗ рж▓рзЗржирзНрж╕": "Fisheye lens view"
}

# ---- Input Translator Function ----
def translate_if_needed(text):
    if text.strip() == "":
        return ""
    detected = translator.detect(text)
    if detected.lang != 'en':
        return translator.translate(text, dest='en').text
    return text

# ---- Inputs (freeform) ----
subject = translate_if_needed(st.text_input("ЁЯзН ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ / ржЪрж░рж┐рждрзНрж░", "ржПржХржЬржи рж░рж╣рж╕рзНржпржоржпрж╝ ржкржерж┐ржХ"))
character_attributes = translate_if_needed(st.text_input("ЁЯФН ржЪрж░рж┐рждрзНрж░рзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп", "рзйрзж ржмржЫрж░ ржмржпрж╝рж╕рзА, ржкрзБрж░рзБрж╖, рж▓ржорзНржмрж╛ ржХрзЛржЯ, ржирзАрж▓ ржЪрзЛржЦ, рж╕рж╛ржЗржмрж╛рж░ рж╣рж╛ржд"))
environment = translate_if_needed(st.text_input("ЁЯМЖ ржкрж░рж┐ржмрзЗрж╢ / рж╕рзНржерж╛ржи", "ржнржмржирзЗрж░ ржЫрж╛ржжрзЗ ржПржХржЯрж┐ ржкрж░рж┐рждрзНржпржХрзНржд ржмрж╛ржЧрж╛ржи"))
objects = translate_if_needed(st.text_input("ЁЯУж ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж╕рзНрждрзБ", "ржбрзНрж░рзЛржи, рж▓рждрж╛ржкрж╛рждрж╛, ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржмрж┐рж▓ржмрзЛрж░рзНржб"))
weather = st.selectbox("ЁЯМж ржЖржмрж╣рж╛ржУрзЯрж╛", ["ржкрж░рж┐рж╖рзНржХрж╛рж░", "ржмрзГрж╖рзНржЯрж┐", "ржХрзБржпрж╝рж╛рж╢рж╛", "ржЭржбрж╝", "рждрзБрж╖рж╛рж░", "ржорзЗржШрж▓рж╛", "ржЕржЬрж╛ржирж╛"])
time_of_day = st.selectbox("ЁЯХР рж╕ржорзЯ", ["ржнрзЛрж░", "рж╕ржХрж╛рж▓", "ржжрзБржкрзБрж░", "ржЧрзЛрж▓рзНржбрзЗржи ржЖржУрзЯрж╛рж░", "рж╕ржирзНржзрзНржпрж╛", "рж░рж╛ржд", "ржоржзрзНржпрж░рж╛ржд"])
lighting_bn = st.selectbox("ЁЯТб ржЖрж▓рзЛ", list(lighting_options.keys()))
mood_bn = st.selectbox("ЁЯОн ржорзБржб / ржЖржмрзЗржЧ", list(mood_options.keys()))
style_bn = st.selectbox("ЁЯОи ржЖрж░рзНржЯ рж╕рзНржЯрж╛ржЗрж▓", list(style_options.keys()))
fusion_bn = st.selectbox("ЁЯФА рж╕рзНржЯрж╛ржЗрж▓ ржлрж┐ржЙрж╢ржи", list(fusion_options.keys()))
camera_bn = st.selectbox("ЁЯУ╖ ржХрзНржпрж╛ржорзЗрж░рж╛ / рж▓рзЗржирзНрж╕", list(camera_options.keys()))
action = translate_if_needed(st.text_input("ЁЯОм ржХрж╛рж░рзНржпржХрж▓рж╛ржк / ржЕржирзБржнрзВрждрж┐", "рж╕рзЗ рж╢рж╣рж░рзЗрж░ ржжрж┐ржХрзЗ рждрж╛ржХрж┐рзЯрзЗ ржЖржЫрзЗ, ржзрзЛржБрзЯрж╛ рждрж╛рж░ ржХрзЛржЯ ржерзЗржХрзЗ ржмрзЗрж░ рж╣ржЪрзНржЫрзЗ"))
colors = translate_if_needed(st.text_input("ЁЯМИ рж░ржЩ ржУ ржЯрзЗржХрзНрж╕ржЪрж╛рж░", "ржирзАрж▓ ржУ ржмрзЗржЧрзБржирж┐ ржЫрж╛ржпрж╝рж╛, ржЭрж▓ржорж▓рзЗ ржЧрзЛрж▓рж╛ржкрж┐ ржирж┐ржпрж╝ржи"))
abstract = translate_if_needed(st.text_input("ЁЯТн ржмрж┐ржорзВрж░рзНржд ржнрж╛ржмржирж╛ (ржРржЪрзНржЫрж┐ржХ)", "ржПржХржЯрж┐ рж╕ржВржпрзБржХрзНржд рж╕ржорж╛ржЬрзЗ ржмрж┐ржЪрзНржЫрж┐ржирзНржирждрж╛рж░ ржкрзНрж░рждрж┐ржЪрзНржЫржмрж┐"))
notes = translate_if_needed(st.text_area("ЁЯУЭ ржЕрждрж┐рж░рж┐ржХрзНржд ржоржирзНрждржмрзНржп (ржРржЪрзНржЫрж┐ржХ)", "рж╕рж╛ржЗржмрж╛рж░ржкрж╛ржЩрзНржХ ржПржмржВ ржирзЛржпрж╝рж╛рж░рзЗрж░ ржорж┐рж╢рзНрж░ржг"))

# System prompt
system_prompt = """You are a professional prompt engineer specializing in generating highly detailed, vivid, and imaginative prompts for AI image generation.

Your format must always follow this structure:
[Style] | [Subject/Character] | [Environment] | [Details about action/emotion] | [Color Scheme/Lighting/Texture]

Use elevated, visual language and cinematic descriptions.
Follow these rules:
- Focus on character traits, mood, emotion, atmosphere, materials, and depth
- Include abstract or conceptual ideas when given
- Blend artistic styles when requested
- No bullet points. Only output the final prompt in one block.

The goal: craft something a visual artist could bring to life immediately.
"""

# Final data formatting
user_combined = f"""Style: {style_options[style_bn]}
Artistic Fusion: {fusion_options[fusion_bn]}
Subject: {subject}
Character Details: {character_attributes}
Environment: {environment}
Objects/Scene Elements: {objects}
Time of day: {time_of_day}
Weather: {weather}
Lighting: {lighting_options[lighting_bn]}
Mood: {mood_options[mood_bn]}
Camera Details: {camera_options[camera_bn]}
Action/Emotion: {action}
Color Palette & Texture: {colors}
Abstract/Conceptual Notes: {abstract}
Extra Notes: {notes}"""

# Generate Prompt
if st.button("ЁЯОп ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐ ржХрж░рзБржи"):
    with st.spinner("рж╕рж┐ржирзЗржорж╛ржЯрж┐ржХ ржкрзНрж░ржорзНржкржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_combined}
                ],
                temperature=0.8,
                max_tokens=400
            )

            result = response["choices"][0]["message"]["content"].strip()

            st.markdown("### ЁЯЦ╝я╕П Final English Prompt")
            st.code(result, language="text")

        except Exception as e:
            st.error(f"тЭМ Error: {e}")
